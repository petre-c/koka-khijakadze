@using DevExpress.Blazor
@using DevExpress.ExpressApp.Blazor
@using DevExpress.ExpressApp.Blazor.Services
@using DevExpress.ExpressApp.Blazor.Templates

<DxPopup
    Visible="true"
    ShowCloseButton="true"
    CloseOnEscape="false"
    CloseOnOutsideClick="false"
    Scrollable="true"
    ShowFooter="true"
    MinWidth="90%"
    MinHeight="@FrameTemplate.MinHeight"
    Width="90%"
    Height="@FrameTemplate.Height"
    MaxWidth="@FrameTemplate.MaxWidth"
    MaxHeight="@FrameTemplate.MaxHeight"
    CssClass="xafPopup"
    Shown="OnShown">
    <HeaderContentTemplate>
        <ViewCaptionComponent WindowCaption="(IWindowCaption)FrameTemplate!"></ViewCaptionComponent>
    </HeaderContentTemplate>
    <BodyContentTemplate>
        <div class="main">
            @if (FrameTemplate!.IsActionsToolbarVisible && FrameTemplate.Toolbar.ContainsVisibleActionControl())
            {
                <div class="main-toolbar px-1 pt-1 pb-2">@FrameTemplate.Toolbar.GetComponentContent()</div>
            }
        </div>
        <div class="main-content px-1">
            <ViewSiteComponent View="FrameTemplate!.View"></ViewSiteComponent>
        </div>
    </BodyContentTemplate>
    <FooterContentTemplate>
        @FrameTemplate!.BottomToolbar.GetComponentContent()
        @* //               builder.AddAttribute(28, "FooterContentTemplate", (MulticastDelegate) (context => (RenderFragment) (__builder2 => __builder2.AddContent(29, FrameTemplate.BottomToolbar.GetComponentContent())))); *@
    </FooterContentTemplate>
</DxPopup>

@code {
#nullable enable

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.LoadingIndicatorProvider.Hold("Popup Showing");
    }

    protected void OnShown() => this.LoadingIndicatorProvider.Release("Popup Showing");

    [Inject]
    private ILoadingIndicatorProvider LoadingIndicatorProvider { get; set; } = null!;

    [Parameter]
    public PopupWindowTemplate FrameTemplate { get; set; } = null!;

    public static RenderFragment Create(PopupWindowTemplate template) => @<AsDxPopup FrameTemplate="@template"/>;

}


@* // *@
@* // public class AsPopupWindowTemplateComponent : PopupWindowTemplateComponent *@
@* // { *@
@* //     protected override void BuildRenderTree(RenderTreeBuilder builder) *@
@* //     { *@
@* //         builder.OpenComponent<DxPopup>(0); *@
@* //               builder.AddAttribute(1, "Visible", RuntimeHelpers.TypeCheck(true)); *@
@* //               builder.AddAttribute(2, "ShowCloseButton", RuntimeHelpers.TypeCheck(false)); *@
@* //               builder.AddAttribute(3, "CloseOnEscape", RuntimeHelpers.TypeCheck(false)); *@
@* //               builder.AddAttribute(4, "CloseOnOutsideClick", RuntimeHelpers.TypeCheck(false)); *@
@* //               builder.AddAttribute(5, "Scrollable", RuntimeHelpers.TypeCheck(true)); *@
@* //               builder.AddAttribute(6, "ShowFooter", RuntimeHelpers.TypeCheck(true)); *@
@* //               builder.AddAttribute(7, "MinWidth", RuntimeHelpers.TypeCheck(FrameTemplate.MinWidth)); *@
@* //               builder.AddAttribute(8, "MinHeight", RuntimeHelpers.TypeCheck(FrameTemplate.MinHeight)); *@
@* //               builder.AddAttribute(9, "Width", RuntimeHelpers.TypeCheck(FrameTemplate.Width)); *@
@* //               builder.AddAttribute(10, "Height", RuntimeHelpers.TypeCheck(FrameTemplate.Height)); *@
@* //               builder.AddAttribute(11, "MaxWidth", RuntimeHelpers.TypeCheck(FrameTemplate.MaxWidth)); *@
@* //               builder.AddAttribute(12, "MaxHeight", RuntimeHelpers.TypeCheck(FrameTemplate.MaxHeight)); *@
@* //               builder.AddAttribute(13, "CssClass", "xafPopup"); *@
@* //               builder.AddAttribute(14, "Shown", RuntimeHelpers.TypeCheck(EventCallback.Factory.Create<PopupShownEventArgs>(this, OnShown))); *@
@* //               builder.AddAttribute(15, "HeaderContentTemplate", (MulticastDelegate) (context => (RenderFragment) (__builder2 => *@
@* //               { *@
@* //                 __builder2.OpenComponent<ViewCaptionComponent>(16); *@
@* //                 __builder2.AddAttribute(17, "WindowCaption", (object) RuntimeHelpers.TypeCheck<IWindowCaption>((IWindowCaption) FrameTemplate)); *@
@* //                 __builder2.CloseComponent(); *@
@* //               }))); *@
@* //               builder.AddAttribute(18, "BodyContentTemplate", (MulticastDelegate) (context => (RenderFragment) (__builder2 => *@
@* //               { *@
@* //                 __builder2.OpenElement(19, "div"); *@
@* //                 __builder2.AddAttribute(20, "class", "main"); *@
@* //                 if (FrameTemplate.IsActionsToolbarVisible && FrameTemplate.Toolbar.ContainsVisibleActionControl()) *@
@* //                 { *@
@* //                   __builder2.OpenElement(21, "div"); *@
@* //                   __builder2.AddAttribute(22, "class", "main-toolbar px-1 pt-1 pb-2"); *@
@* //                   __builder2.AddContent(23, FrameTemplate.Toolbar.GetComponentContent()); *@
@* //                   __builder2.CloseElement(); *@
@* //                 } *@
@* //                 __builder2.OpenElement(24, "div"); *@
@* //                 __builder2.AddAttribute(25, "class", "main-content px-1"); *@
@* //                 __builder2.OpenComponent<ViewSiteComponent>(26); *@
@* //                 __builder2.AddAttribute(27, "View", (object) RuntimeHelpers.TypeCheck<View>(FrameTemplate.View)); *@
@* //                 __builder2.CloseComponent(); *@
@* //                 __builder2.CloseElement(); *@
@* //                 __builder2.CloseElement(); *@
@* //               }))); *@
@* //               builder.AddAttribute(28, "FooterContentTemplate", (MulticastDelegate) (context => (RenderFragment) (__builder2 => __builder2.AddContent(29, FrameTemplate.BottomToolbar.GetComponentContent())))); *@
@* //               builder.CloseComponent(); *@
@* //     } *@
@* // } *@